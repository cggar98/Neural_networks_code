# -*- coding: utf-8 -*-
"""Tu primera red neuronal en Python y Tensorflow

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ehETBOVtCqe7G6HOvm84hfXba8Gd9ILW
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Temp data
celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
fahrenheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)

# Layers creations
oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=3)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1, oculta2, salida])

# Compile the model using Adam optimizer with a high learning rate (0.1)
# and mean squared error loss, typically used for regression tasks.
modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

# Training
print("Starting training...")
historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=False)
print("Trained model!!!")

# Plot the loss magnitude over epoch training to see model convergence.
  plt.xlabel("Epoch")
  plt.ylabel("Loss magnitude")
  plt.plot(historial.history["loss"])

# Doing prediction
resultado = modelo.predict([100.0])
print("The result is " + str(resultado) + " fahrenheit!")

# Internal variables of the model
print(oculta1.get_weights())
print(oculta2.get_weights())
print(salida.get_weights())